//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.239
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.239에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace EWSSystem.Factum {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ApiBinding", Namespace="factum.se/dab")]
    public partial class DabCtrlApi : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Authorization authorizationValueField;
        
        private System.Threading.SendOrPostCallback RequestTimePlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestAllConfigurationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestBookOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestAllProgramTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestProgramTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestNewProgramTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestNewLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestNewApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestServiceLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestNewServiceLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestComponentLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestNewComponentLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestSendPNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestSendPNumUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopPNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopPNumUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopAllPNumsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStartAnnouncementOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopAnnouncementOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestActiveAnnouncementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestAllRegionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestAllClustersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestSendEmergencyWarningOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopEmergencyWarningOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopAllEmergencyWarningsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestSendTrafficSystemMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopTrafficSystemMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestSendTrafficUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopTrafficUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStopAllTrafficMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestSendTestFigOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestServiceLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestAllServiceLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestNewServiceLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestRemoveServiceLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestAllServiceComponentsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DabCtrlApi() {
            this.Url = global::EWSSystem.Properties.Settings.Default.EWSSystem_Factum_DabCtrlApi;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Authorization AuthorizationValue {
            get {
                return this.authorizationValueField;
            }
            set {
                this.authorizationValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RequestTimePlanCompletedEventHandler RequestTimePlanCompleted;
        
        /// <remarks/>
        public event RequestAllConfigurationsCompletedEventHandler RequestAllConfigurationsCompleted;
        
        /// <remarks/>
        public event RequestBookCompletedEventHandler RequestBookCompleted;
        
        /// <remarks/>
        public event RequestCancelCompletedEventHandler RequestCancelCompleted;
        
        /// <remarks/>
        public event RequestAllProgramTypesCompletedEventHandler RequestAllProgramTypesCompleted;
        
        /// <remarks/>
        public event RequestProgramTypeCompletedEventHandler RequestProgramTypeCompleted;
        
        /// <remarks/>
        public event RequestNewProgramTypeCompletedEventHandler RequestNewProgramTypeCompleted;
        
        /// <remarks/>
        public event RequestLanguageCompletedEventHandler RequestLanguageCompleted;
        
        /// <remarks/>
        public event RequestNewLanguageCompletedEventHandler RequestNewLanguageCompleted;
        
        /// <remarks/>
        public event RequestApplicationCompletedEventHandler RequestApplicationCompleted;
        
        /// <remarks/>
        public event RequestNewApplicationCompletedEventHandler RequestNewApplicationCompleted;
        
        /// <remarks/>
        public event RequestServiceLabelCompletedEventHandler RequestServiceLabelCompleted;
        
        /// <remarks/>
        public event RequestNewServiceLabelCompletedEventHandler RequestNewServiceLabelCompleted;
        
        /// <remarks/>
        public event RequestComponentLabelCompletedEventHandler RequestComponentLabelCompleted;
        
        /// <remarks/>
        public event RequestNewComponentLabelCompletedEventHandler RequestNewComponentLabelCompleted;
        
        /// <remarks/>
        public event RequestSendPNumCompletedEventHandler RequestSendPNumCompleted;
        
        /// <remarks/>
        public event RequestSendPNumUpdateCompletedEventHandler RequestSendPNumUpdateCompleted;
        
        /// <remarks/>
        public event RequestStopPNumCompletedEventHandler RequestStopPNumCompleted;
        
        /// <remarks/>
        public event RequestStopPNumUpdateCompletedEventHandler RequestStopPNumUpdateCompleted;
        
        /// <remarks/>
        public event RequestStopAllPNumsCompletedEventHandler RequestStopAllPNumsCompleted;
        
        /// <remarks/>
        public event RequestStartAnnouncementCompletedEventHandler RequestStartAnnouncementCompleted;
        
        /// <remarks/>
        public event RequestStopAnnouncementCompletedEventHandler RequestStopAnnouncementCompleted;
        
        /// <remarks/>
        public event RequestActiveAnnouncementsCompletedEventHandler RequestActiveAnnouncementsCompleted;
        
        /// <remarks/>
        public event RequestAllRegionsCompletedEventHandler RequestAllRegionsCompleted;
        
        /// <remarks/>
        public event RequestAllClustersCompletedEventHandler RequestAllClustersCompleted;
        
        /// <remarks/>
        public event RequestSendEmergencyWarningCompletedEventHandler RequestSendEmergencyWarningCompleted;
        
        /// <remarks/>
        public event RequestStopEmergencyWarningCompletedEventHandler RequestStopEmergencyWarningCompleted;
        
        /// <remarks/>
        public event RequestStopAllEmergencyWarningsCompletedEventHandler RequestStopAllEmergencyWarningsCompleted;
        
        /// <remarks/>
        public event RequestSendTrafficSystemMessageCompletedEventHandler RequestSendTrafficSystemMessageCompleted;
        
        /// <remarks/>
        public event RequestStopTrafficSystemMessageCompletedEventHandler RequestStopTrafficSystemMessageCompleted;
        
        /// <remarks/>
        public event RequestSendTrafficUserMessageCompletedEventHandler RequestSendTrafficUserMessageCompleted;
        
        /// <remarks/>
        public event RequestStopTrafficUserMessageCompletedEventHandler RequestStopTrafficUserMessageCompleted;
        
        /// <remarks/>
        public event RequestStopAllTrafficMessagesCompletedEventHandler RequestStopAllTrafficMessagesCompleted;
        
        /// <remarks/>
        public event RequestSendTestFigCompletedEventHandler RequestSendTestFigCompleted;
        
        /// <remarks/>
        public event RequestServiceLinkCompletedEventHandler RequestServiceLinkCompleted;
        
        /// <remarks/>
        public event RequestAllServiceLinksCompletedEventHandler RequestAllServiceLinksCompleted;
        
        /// <remarks/>
        public event RequestNewServiceLinkCompletedEventHandler RequestNewServiceLinkCompleted;
        
        /// <remarks/>
        public event RequestRemoveServiceLinkCompletedEventHandler RequestRemoveServiceLinkCompleted;
        
        /// <remarks/>
        public event RequestAllServiceComponentsCompletedEventHandler RequestAllServiceComponentsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="TimePlanResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("EntryArray")]
        public Entry[] RequestTimePlan() {
            object[] results = this.Invoke("RequestTimePlan", new object[0]);
            return ((Entry[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestTimePlanAsync() {
            this.RequestTimePlanAsync(null);
        }
        
        /// <remarks/>
        public void RequestTimePlanAsync(object userState) {
            if ((this.RequestTimePlanOperationCompleted == null)) {
                this.RequestTimePlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestTimePlanOperationCompleted);
            }
            this.InvokeAsync("RequestTimePlan", new object[0], this.RequestTimePlanOperationCompleted, userState);
        }
        
        private void OnRequestTimePlanOperationCompleted(object arg) {
            if ((this.RequestTimePlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestTimePlanCompleted(this, new RequestTimePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="AllConfigurationsResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ConfigurationArray")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("configuration")]
        public string[] RequestAllConfigurations() {
            object[] results = this.Invoke("RequestAllConfigurations", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAllConfigurationsAsync() {
            this.RequestAllConfigurationsAsync(null);
        }
        
        /// <remarks/>
        public void RequestAllConfigurationsAsync(object userState) {
            if ((this.RequestAllConfigurationsOperationCompleted == null)) {
                this.RequestAllConfigurationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAllConfigurationsOperationCompleted);
            }
            this.InvokeAsync("RequestAllConfigurations", new object[0], this.RequestAllConfigurationsOperationCompleted, userState);
        }
        
        private void OnRequestAllConfigurationsOperationCompleted(object arg) {
            if ((this.RequestAllConfigurationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAllConfigurationsCompleted(this, new RequestAllConfigurationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="BookResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestBook(ref Entry Entry) {
            object[] results = this.Invoke("RequestBook", new object[] {
                        Entry});
            Entry = ((Entry)(results[0]));
        }
        
        /// <remarks/>
        public void RequestBookAsync(Entry Entry) {
            this.RequestBookAsync(Entry, null);
        }
        
        /// <remarks/>
        public void RequestBookAsync(Entry Entry, object userState) {
            if ((this.RequestBookOperationCompleted == null)) {
                this.RequestBookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestBookOperationCompleted);
            }
            this.InvokeAsync("RequestBook", new object[] {
                        Entry}, this.RequestBookOperationCompleted, userState);
        }
        
        private void OnRequestBookOperationCompleted(object arg) {
            if ((this.RequestBookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestBookCompleted(this, new RequestBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="CancelResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestCancel(Entry Entry) {
            this.Invoke("RequestCancel", new object[] {
                        Entry});
        }
        
        /// <remarks/>
        public void RequestCancelAsync(Entry Entry) {
            this.RequestCancelAsync(Entry, null);
        }
        
        /// <remarks/>
        public void RequestCancelAsync(Entry Entry, object userState) {
            if ((this.RequestCancelOperationCompleted == null)) {
                this.RequestCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestCancelOperationCompleted);
            }
            this.InvokeAsync("RequestCancel", new object[] {
                        Entry}, this.RequestCancelOperationCompleted, userState);
        }
        
        private void OnRequestCancelOperationCompleted(object arg) {
            if ((this.RequestCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestCancelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="AllProgramTypesResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("InternationalArray")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("internationalCode")]
        public string[] RequestAllProgramTypes([System.Xml.Serialization.XmlArrayItemAttribute("coarseCode")] out string[] CoarseArray, [System.Xml.Serialization.XmlArrayItemAttribute("fineCode")] out string[] FineArray) {
            object[] results = this.Invoke("RequestAllProgramTypes", new object[0]);
            CoarseArray = ((string[])(results[1]));
            FineArray = ((string[])(results[2]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAllProgramTypesAsync() {
            this.RequestAllProgramTypesAsync(null);
        }
        
        /// <remarks/>
        public void RequestAllProgramTypesAsync(object userState) {
            if ((this.RequestAllProgramTypesOperationCompleted == null)) {
                this.RequestAllProgramTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAllProgramTypesOperationCompleted);
            }
            this.InvokeAsync("RequestAllProgramTypes", new object[0], this.RequestAllProgramTypesOperationCompleted, userState);
        }
        
        private void OnRequestAllProgramTypesOperationCompleted(object arg) {
            if ((this.RequestAllProgramTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAllProgramTypesCompleted(this, new RequestAllProgramTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="ProgramTypeResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ProgramType")]
        public ProgramType RequestProgramType(int ServiceId) {
            object[] results = this.Invoke("RequestProgramType", new object[] {
                        ServiceId});
            return ((ProgramType)(results[0]));
        }
        
        /// <remarks/>
        public void RequestProgramTypeAsync(int ServiceId) {
            this.RequestProgramTypeAsync(ServiceId, null);
        }
        
        /// <remarks/>
        public void RequestProgramTypeAsync(int ServiceId, object userState) {
            if ((this.RequestProgramTypeOperationCompleted == null)) {
                this.RequestProgramTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestProgramTypeOperationCompleted);
            }
            this.InvokeAsync("RequestProgramType", new object[] {
                        ServiceId}, this.RequestProgramTypeOperationCompleted, userState);
        }
        
        private void OnRequestProgramTypeOperationCompleted(object arg) {
            if ((this.RequestProgramTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestProgramTypeCompleted(this, new RequestProgramTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="NewProgramTypeResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestNewProgramType(int ServiceId, ProgramType ProgramType) {
            this.Invoke("RequestNewProgramType", new object[] {
                        ServiceId,
                        ProgramType});
        }
        
        /// <remarks/>
        public void RequestNewProgramTypeAsync(int ServiceId, ProgramType ProgramType) {
            this.RequestNewProgramTypeAsync(ServiceId, ProgramType, null);
        }
        
        /// <remarks/>
        public void RequestNewProgramTypeAsync(int ServiceId, ProgramType ProgramType, object userState) {
            if ((this.RequestNewProgramTypeOperationCompleted == null)) {
                this.RequestNewProgramTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestNewProgramTypeOperationCompleted);
            }
            this.InvokeAsync("RequestNewProgramType", new object[] {
                        ServiceId,
                        ProgramType}, this.RequestNewProgramTypeOperationCompleted, userState);
        }
        
        private void OnRequestNewProgramTypeOperationCompleted(object arg) {
            if ((this.RequestNewProgramTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestNewProgramTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="LanguageResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Language")]
        public int RequestLanguage(int ComponentId) {
            object[] results = this.Invoke("RequestLanguage", new object[] {
                        ComponentId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RequestLanguageAsync(int ComponentId) {
            this.RequestLanguageAsync(ComponentId, null);
        }
        
        /// <remarks/>
        public void RequestLanguageAsync(int ComponentId, object userState) {
            if ((this.RequestLanguageOperationCompleted == null)) {
                this.RequestLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestLanguageOperationCompleted);
            }
            this.InvokeAsync("RequestLanguage", new object[] {
                        ComponentId}, this.RequestLanguageOperationCompleted, userState);
        }
        
        private void OnRequestLanguageOperationCompleted(object arg) {
            if ((this.RequestLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestLanguageCompleted(this, new RequestLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="NewLanguageResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestNewLanguage(int ComponentId, int Language) {
            this.Invoke("RequestNewLanguage", new object[] {
                        ComponentId,
                        Language});
        }
        
        /// <remarks/>
        public void RequestNewLanguageAsync(int ComponentId, int Language) {
            this.RequestNewLanguageAsync(ComponentId, Language, null);
        }
        
        /// <remarks/>
        public void RequestNewLanguageAsync(int ComponentId, int Language, object userState) {
            if ((this.RequestNewLanguageOperationCompleted == null)) {
                this.RequestNewLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestNewLanguageOperationCompleted);
            }
            this.InvokeAsync("RequestNewLanguage", new object[] {
                        ComponentId,
                        Language}, this.RequestNewLanguageOperationCompleted, userState);
        }
        
        private void OnRequestNewLanguageOperationCompleted(object arg) {
            if ((this.RequestNewLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestNewLanguageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="ApplicationResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ApplicationArray")]
        public Application[] RequestApplication(int ComponentId) {
            object[] results = this.Invoke("RequestApplication", new object[] {
                        ComponentId});
            return ((Application[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestApplicationAsync(int ComponentId) {
            this.RequestApplicationAsync(ComponentId, null);
        }
        
        /// <remarks/>
        public void RequestApplicationAsync(int ComponentId, object userState) {
            if ((this.RequestApplicationOperationCompleted == null)) {
                this.RequestApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestApplicationOperationCompleted);
            }
            this.InvokeAsync("RequestApplication", new object[] {
                        ComponentId}, this.RequestApplicationOperationCompleted, userState);
        }
        
        private void OnRequestApplicationOperationCompleted(object arg) {
            if ((this.RequestApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestApplicationCompleted(this, new RequestApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="NewApplicationResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestNewApplication(int ComponentId, Application[] ApplicationArray) {
            this.Invoke("RequestNewApplication", new object[] {
                        ComponentId,
                        ApplicationArray});
        }
        
        /// <remarks/>
        public void RequestNewApplicationAsync(int ComponentId, Application[] ApplicationArray) {
            this.RequestNewApplicationAsync(ComponentId, ApplicationArray, null);
        }
        
        /// <remarks/>
        public void RequestNewApplicationAsync(int ComponentId, Application[] ApplicationArray, object userState) {
            if ((this.RequestNewApplicationOperationCompleted == null)) {
                this.RequestNewApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestNewApplicationOperationCompleted);
            }
            this.InvokeAsync("RequestNewApplication", new object[] {
                        ComponentId,
                        ApplicationArray}, this.RequestNewApplicationOperationCompleted, userState);
        }
        
        private void OnRequestNewApplicationOperationCompleted(object arg) {
            if ((this.RequestNewApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestNewApplicationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="ServiceLabelResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("LongLabel")]
        public string RequestServiceLabel(int ServiceId, out string ShortLabel) {
            object[] results = this.Invoke("RequestServiceLabel", new object[] {
                        ServiceId});
            ShortLabel = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequestServiceLabelAsync(int ServiceId) {
            this.RequestServiceLabelAsync(ServiceId, null);
        }
        
        /// <remarks/>
        public void RequestServiceLabelAsync(int ServiceId, object userState) {
            if ((this.RequestServiceLabelOperationCompleted == null)) {
                this.RequestServiceLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestServiceLabelOperationCompleted);
            }
            this.InvokeAsync("RequestServiceLabel", new object[] {
                        ServiceId}, this.RequestServiceLabelOperationCompleted, userState);
        }
        
        private void OnRequestServiceLabelOperationCompleted(object arg) {
            if ((this.RequestServiceLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestServiceLabelCompleted(this, new RequestServiceLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="NewServiceLabelResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestNewServiceLabel(int ServiceId, string LongLabel, string ShortLabel) {
            this.Invoke("RequestNewServiceLabel", new object[] {
                        ServiceId,
                        LongLabel,
                        ShortLabel});
        }
        
        /// <remarks/>
        public void RequestNewServiceLabelAsync(int ServiceId, string LongLabel, string ShortLabel) {
            this.RequestNewServiceLabelAsync(ServiceId, LongLabel, ShortLabel, null);
        }
        
        /// <remarks/>
        public void RequestNewServiceLabelAsync(int ServiceId, string LongLabel, string ShortLabel, object userState) {
            if ((this.RequestNewServiceLabelOperationCompleted == null)) {
                this.RequestNewServiceLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestNewServiceLabelOperationCompleted);
            }
            this.InvokeAsync("RequestNewServiceLabel", new object[] {
                        ServiceId,
                        LongLabel,
                        ShortLabel}, this.RequestNewServiceLabelOperationCompleted, userState);
        }
        
        private void OnRequestNewServiceLabelOperationCompleted(object arg) {
            if ((this.RequestNewServiceLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestNewServiceLabelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="ComponentLabelResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("LongLabel")]
        public string RequestComponentLabel(int ComponentId, out string ShortLabel) {
            object[] results = this.Invoke("RequestComponentLabel", new object[] {
                        ComponentId});
            ShortLabel = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequestComponentLabelAsync(int ComponentId) {
            this.RequestComponentLabelAsync(ComponentId, null);
        }
        
        /// <remarks/>
        public void RequestComponentLabelAsync(int ComponentId, object userState) {
            if ((this.RequestComponentLabelOperationCompleted == null)) {
                this.RequestComponentLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestComponentLabelOperationCompleted);
            }
            this.InvokeAsync("RequestComponentLabel", new object[] {
                        ComponentId}, this.RequestComponentLabelOperationCompleted, userState);
        }
        
        private void OnRequestComponentLabelOperationCompleted(object arg) {
            if ((this.RequestComponentLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestComponentLabelCompleted(this, new RequestComponentLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="NewComponentLabelResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestNewComponentLabel(int ComponentId, string LongLabel, string ShortLabel) {
            this.Invoke("RequestNewComponentLabel", new object[] {
                        ComponentId,
                        LongLabel,
                        ShortLabel});
        }
        
        /// <remarks/>
        public void RequestNewComponentLabelAsync(int ComponentId, string LongLabel, string ShortLabel) {
            this.RequestNewComponentLabelAsync(ComponentId, LongLabel, ShortLabel, null);
        }
        
        /// <remarks/>
        public void RequestNewComponentLabelAsync(int ComponentId, string LongLabel, string ShortLabel, object userState) {
            if ((this.RequestNewComponentLabelOperationCompleted == null)) {
                this.RequestNewComponentLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestNewComponentLabelOperationCompleted);
            }
            this.InvokeAsync("RequestNewComponentLabel", new object[] {
                        ComponentId,
                        LongLabel,
                        ShortLabel}, this.RequestNewComponentLabelOperationCompleted, userState);
        }
        
        private void OnRequestNewComponentLabelOperationCompleted(object arg) {
            if ((this.RequestNewComponentLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestNewComponentLabelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="SendPNumResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestSendPNum(bool OtherEnsemble, int ServiceId, PNum PNum, bool Continuation) {
            this.Invoke("RequestSendPNum", new object[] {
                        OtherEnsemble,
                        ServiceId,
                        PNum,
                        Continuation});
        }
        
        /// <remarks/>
        public void RequestSendPNumAsync(bool OtherEnsemble, int ServiceId, PNum PNum, bool Continuation) {
            this.RequestSendPNumAsync(OtherEnsemble, ServiceId, PNum, Continuation, null);
        }
        
        /// <remarks/>
        public void RequestSendPNumAsync(bool OtherEnsemble, int ServiceId, PNum PNum, bool Continuation, object userState) {
            if ((this.RequestSendPNumOperationCompleted == null)) {
                this.RequestSendPNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestSendPNumOperationCompleted);
            }
            this.InvokeAsync("RequestSendPNum", new object[] {
                        OtherEnsemble,
                        ServiceId,
                        PNum,
                        Continuation}, this.RequestSendPNumOperationCompleted, userState);
        }
        
        private void OnRequestSendPNumOperationCompleted(object arg) {
            if ((this.RequestSendPNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestSendPNumCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="SendPNumUpdateResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestSendPNumUpdate(bool OtherEnsemble, bool Continuation, int ServiceId, PNum PNum, int NewServiceId, PNum NewPNum) {
            this.Invoke("RequestSendPNumUpdate", new object[] {
                        OtherEnsemble,
                        Continuation,
                        ServiceId,
                        PNum,
                        NewServiceId,
                        NewPNum});
        }
        
        /// <remarks/>
        public void RequestSendPNumUpdateAsync(bool OtherEnsemble, bool Continuation, int ServiceId, PNum PNum, int NewServiceId, PNum NewPNum) {
            this.RequestSendPNumUpdateAsync(OtherEnsemble, Continuation, ServiceId, PNum, NewServiceId, NewPNum, null);
        }
        
        /// <remarks/>
        public void RequestSendPNumUpdateAsync(bool OtherEnsemble, bool Continuation, int ServiceId, PNum PNum, int NewServiceId, PNum NewPNum, object userState) {
            if ((this.RequestSendPNumUpdateOperationCompleted == null)) {
                this.RequestSendPNumUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestSendPNumUpdateOperationCompleted);
            }
            this.InvokeAsync("RequestSendPNumUpdate", new object[] {
                        OtherEnsemble,
                        Continuation,
                        ServiceId,
                        PNum,
                        NewServiceId,
                        NewPNum}, this.RequestSendPNumUpdateOperationCompleted, userState);
        }
        
        private void OnRequestSendPNumUpdateOperationCompleted(object arg) {
            if ((this.RequestSendPNumUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestSendPNumUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopPNumResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopPNum(bool OtherEnsemble, int ServiceId) {
            this.Invoke("RequestStopPNum", new object[] {
                        OtherEnsemble,
                        ServiceId});
        }
        
        /// <remarks/>
        public void RequestStopPNumAsync(bool OtherEnsemble, int ServiceId) {
            this.RequestStopPNumAsync(OtherEnsemble, ServiceId, null);
        }
        
        /// <remarks/>
        public void RequestStopPNumAsync(bool OtherEnsemble, int ServiceId, object userState) {
            if ((this.RequestStopPNumOperationCompleted == null)) {
                this.RequestStopPNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopPNumOperationCompleted);
            }
            this.InvokeAsync("RequestStopPNum", new object[] {
                        OtherEnsemble,
                        ServiceId}, this.RequestStopPNumOperationCompleted, userState);
        }
        
        private void OnRequestStopPNumOperationCompleted(object arg) {
            if ((this.RequestStopPNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopPNumCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopPNumUpdateResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopPNumUpdate(bool OtherEnsemble, int ServiceId, PNum PNum) {
            this.Invoke("RequestStopPNumUpdate", new object[] {
                        OtherEnsemble,
                        ServiceId,
                        PNum});
        }
        
        /// <remarks/>
        public void RequestStopPNumUpdateAsync(bool OtherEnsemble, int ServiceId, PNum PNum) {
            this.RequestStopPNumUpdateAsync(OtherEnsemble, ServiceId, PNum, null);
        }
        
        /// <remarks/>
        public void RequestStopPNumUpdateAsync(bool OtherEnsemble, int ServiceId, PNum PNum, object userState) {
            if ((this.RequestStopPNumUpdateOperationCompleted == null)) {
                this.RequestStopPNumUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopPNumUpdateOperationCompleted);
            }
            this.InvokeAsync("RequestStopPNumUpdate", new object[] {
                        OtherEnsemble,
                        ServiceId,
                        PNum}, this.RequestStopPNumUpdateOperationCompleted, userState);
        }
        
        private void OnRequestStopPNumUpdateOperationCompleted(object arg) {
            if ((this.RequestStopPNumUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopPNumUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopAllPNumsResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopAllPNums() {
            this.Invoke("RequestStopAllPNums", new object[0]);
        }
        
        /// <remarks/>
        public void RequestStopAllPNumsAsync() {
            this.RequestStopAllPNumsAsync(null);
        }
        
        /// <remarks/>
        public void RequestStopAllPNumsAsync(object userState) {
            if ((this.RequestStopAllPNumsOperationCompleted == null)) {
                this.RequestStopAllPNumsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopAllPNumsOperationCompleted);
            }
            this.InvokeAsync("RequestStopAllPNums", new object[0], this.RequestStopAllPNumsOperationCompleted, userState);
        }
        
        private void OnRequestStopAllPNumsOperationCompleted(object arg) {
            if ((this.RequestStopAllPNumsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopAllPNumsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StartAnnouncementResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ID")]
        public int RequestStartAnnouncement(string Cluster, int Type, string Region, bool New, string SourceName) {
            object[] results = this.Invoke("RequestStartAnnouncement", new object[] {
                        Cluster,
                        Type,
                        Region,
                        New,
                        SourceName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RequestStartAnnouncementAsync(string Cluster, int Type, string Region, bool New, string SourceName) {
            this.RequestStartAnnouncementAsync(Cluster, Type, Region, New, SourceName, null);
        }
        
        /// <remarks/>
        public void RequestStartAnnouncementAsync(string Cluster, int Type, string Region, bool New, string SourceName, object userState) {
            if ((this.RequestStartAnnouncementOperationCompleted == null)) {
                this.RequestStartAnnouncementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStartAnnouncementOperationCompleted);
            }
            this.InvokeAsync("RequestStartAnnouncement", new object[] {
                        Cluster,
                        Type,
                        Region,
                        New,
                        SourceName}, this.RequestStartAnnouncementOperationCompleted, userState);
        }
        
        private void OnRequestStartAnnouncementOperationCompleted(object arg) {
            if ((this.RequestStartAnnouncementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStartAnnouncementCompleted(this, new RequestStartAnnouncementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopAnnouncementResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopAnnouncement(int ID) {
            this.Invoke("RequestStopAnnouncement", new object[] {
                        ID});
        }
        
        /// <remarks/>
        public void RequestStopAnnouncementAsync(int ID) {
            this.RequestStopAnnouncementAsync(ID, null);
        }
        
        /// <remarks/>
        public void RequestStopAnnouncementAsync(int ID, object userState) {
            if ((this.RequestStopAnnouncementOperationCompleted == null)) {
                this.RequestStopAnnouncementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopAnnouncementOperationCompleted);
            }
            this.InvokeAsync("RequestStopAnnouncement", new object[] {
                        ID}, this.RequestStopAnnouncementOperationCompleted, userState);
        }
        
        private void OnRequestStopAnnouncementOperationCompleted(object arg) {
            if ((this.RequestStopAnnouncementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopAnnouncementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="ActiveAnnouncementsResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("AnnouncementArray")]
        public Announcement[] RequestActiveAnnouncements() {
            object[] results = this.Invoke("RequestActiveAnnouncements", new object[0]);
            return ((Announcement[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestActiveAnnouncementsAsync() {
            this.RequestActiveAnnouncementsAsync(null);
        }
        
        /// <remarks/>
        public void RequestActiveAnnouncementsAsync(object userState) {
            if ((this.RequestActiveAnnouncementsOperationCompleted == null)) {
                this.RequestActiveAnnouncementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestActiveAnnouncementsOperationCompleted);
            }
            this.InvokeAsync("RequestActiveAnnouncements", new object[0], this.RequestActiveAnnouncementsOperationCompleted, userState);
        }
        
        private void OnRequestActiveAnnouncementsOperationCompleted(object arg) {
            if ((this.RequestActiveAnnouncementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestActiveAnnouncementsCompleted(this, new RequestActiveAnnouncementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="AllRegionsResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("RegionArray")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("Region")]
        public string[] RequestAllRegions() {
            object[] results = this.Invoke("RequestAllRegions", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAllRegionsAsync() {
            this.RequestAllRegionsAsync(null);
        }
        
        /// <remarks/>
        public void RequestAllRegionsAsync(object userState) {
            if ((this.RequestAllRegionsOperationCompleted == null)) {
                this.RequestAllRegionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAllRegionsOperationCompleted);
            }
            this.InvokeAsync("RequestAllRegions", new object[0], this.RequestAllRegionsOperationCompleted, userState);
        }
        
        private void OnRequestAllRegionsOperationCompleted(object arg) {
            if ((this.RequestAllRegionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAllRegionsCompleted(this, new RequestAllRegionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="AllClustersResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ClusterArray")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("Cluster")]
        public string[] RequestAllClusters() {
            object[] results = this.Invoke("RequestAllClusters", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAllClustersAsync() {
            this.RequestAllClustersAsync(null);
        }
        
        /// <remarks/>
        public void RequestAllClustersAsync(object userState) {
            if ((this.RequestAllClustersOperationCompleted == null)) {
                this.RequestAllClustersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAllClustersOperationCompleted);
            }
            this.InvokeAsync("RequestAllClusters", new object[0], this.RequestAllClustersOperationCompleted, userState);
        }
        
        private void OnRequestAllClustersOperationCompleted(object arg) {
            if ((this.RequestAllClustersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAllClustersCompleted(this, new RequestAllClustersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="SendEmergencyWarningResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestSendEmergencyWarning(bool MsgFlag, int TCID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] EwsField) {
            this.Invoke("RequestSendEmergencyWarning", new object[] {
                        MsgFlag,
                        TCID,
                        EwsField});
        }
        
        /// <remarks/>
        public void RequestSendEmergencyWarningAsync(bool MsgFlag, int TCID, byte[] EwsField) {
            this.RequestSendEmergencyWarningAsync(MsgFlag, TCID, EwsField, null);
        }
        
        /// <remarks/>
        public void RequestSendEmergencyWarningAsync(bool MsgFlag, int TCID, byte[] EwsField, object userState) {
            if ((this.RequestSendEmergencyWarningOperationCompleted == null)) {
                this.RequestSendEmergencyWarningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestSendEmergencyWarningOperationCompleted);
            }
            this.InvokeAsync("RequestSendEmergencyWarning", new object[] {
                        MsgFlag,
                        TCID,
                        EwsField}, this.RequestSendEmergencyWarningOperationCompleted, userState);
        }
        
        private void OnRequestSendEmergencyWarningOperationCompleted(object arg) {
            if ((this.RequestSendEmergencyWarningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestSendEmergencyWarningCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopEmergencyWarningResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopEmergencyWarning(bool MsgFlag, int TCID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] EwsField) {
            this.Invoke("RequestStopEmergencyWarning", new object[] {
                        MsgFlag,
                        TCID,
                        EwsField});
        }
        
        /// <remarks/>
        public void RequestStopEmergencyWarningAsync(bool MsgFlag, int TCID, byte[] EwsField) {
            this.RequestStopEmergencyWarningAsync(MsgFlag, TCID, EwsField, null);
        }
        
        /// <remarks/>
        public void RequestStopEmergencyWarningAsync(bool MsgFlag, int TCID, byte[] EwsField, object userState) {
            if ((this.RequestStopEmergencyWarningOperationCompleted == null)) {
                this.RequestStopEmergencyWarningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopEmergencyWarningOperationCompleted);
            }
            this.InvokeAsync("RequestStopEmergencyWarning", new object[] {
                        MsgFlag,
                        TCID,
                        EwsField}, this.RequestStopEmergencyWarningOperationCompleted, userState);
        }
        
        private void OnRequestStopEmergencyWarningOperationCompleted(object arg) {
            if ((this.RequestStopEmergencyWarningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopEmergencyWarningCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopAllEmergencyWarningsResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopAllEmergencyWarnings(int TCID) {
            this.Invoke("RequestStopAllEmergencyWarnings", new object[] {
                        TCID});
        }
        
        /// <remarks/>
        public void RequestStopAllEmergencyWarningsAsync(int TCID) {
            this.RequestStopAllEmergencyWarningsAsync(TCID, null);
        }
        
        /// <remarks/>
        public void RequestStopAllEmergencyWarningsAsync(int TCID, object userState) {
            if ((this.RequestStopAllEmergencyWarningsOperationCompleted == null)) {
                this.RequestStopAllEmergencyWarningsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopAllEmergencyWarningsOperationCompleted);
            }
            this.InvokeAsync("RequestStopAllEmergencyWarnings", new object[] {
                        TCID}, this.RequestStopAllEmergencyWarningsOperationCompleted, userState);
        }
        
        private void OnRequestStopAllEmergencyWarningsOperationCompleted(object arg) {
            if ((this.RequestStopAllEmergencyWarningsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopAllEmergencyWarningsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="SendTrafficSystemMessageResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestSendTrafficSystemMessage(bool Scrambled, int TCID, int SysMsg) {
            this.Invoke("RequestSendTrafficSystemMessage", new object[] {
                        Scrambled,
                        TCID,
                        SysMsg});
        }
        
        /// <remarks/>
        public void RequestSendTrafficSystemMessageAsync(bool Scrambled, int TCID, int SysMsg) {
            this.RequestSendTrafficSystemMessageAsync(Scrambled, TCID, SysMsg, null);
        }
        
        /// <remarks/>
        public void RequestSendTrafficSystemMessageAsync(bool Scrambled, int TCID, int SysMsg, object userState) {
            if ((this.RequestSendTrafficSystemMessageOperationCompleted == null)) {
                this.RequestSendTrafficSystemMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestSendTrafficSystemMessageOperationCompleted);
            }
            this.InvokeAsync("RequestSendTrafficSystemMessage", new object[] {
                        Scrambled,
                        TCID,
                        SysMsg}, this.RequestSendTrafficSystemMessageOperationCompleted, userState);
        }
        
        private void OnRequestSendTrafficSystemMessageOperationCompleted(object arg) {
            if ((this.RequestSendTrafficSystemMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestSendTrafficSystemMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopTrafficSystemMessageResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopTrafficSystemMessage(bool Scrambled, int TCID, int SysMsg) {
            this.Invoke("RequestStopTrafficSystemMessage", new object[] {
                        Scrambled,
                        TCID,
                        SysMsg});
        }
        
        /// <remarks/>
        public void RequestStopTrafficSystemMessageAsync(bool Scrambled, int TCID, int SysMsg) {
            this.RequestStopTrafficSystemMessageAsync(Scrambled, TCID, SysMsg, null);
        }
        
        /// <remarks/>
        public void RequestStopTrafficSystemMessageAsync(bool Scrambled, int TCID, int SysMsg, object userState) {
            if ((this.RequestStopTrafficSystemMessageOperationCompleted == null)) {
                this.RequestStopTrafficSystemMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopTrafficSystemMessageOperationCompleted);
            }
            this.InvokeAsync("RequestStopTrafficSystemMessage", new object[] {
                        Scrambled,
                        TCID,
                        SysMsg}, this.RequestStopTrafficSystemMessageOperationCompleted, userState);
        }
        
        private void OnRequestStopTrafficSystemMessageOperationCompleted(object arg) {
            if ((this.RequestStopTrafficSystemMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopTrafficSystemMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="SendTrafficUserMessageResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestSendTrafficUserMessage(bool Scrambled, int TCID, long UserMsg) {
            this.Invoke("RequestSendTrafficUserMessage", new object[] {
                        Scrambled,
                        TCID,
                        UserMsg});
        }
        
        /// <remarks/>
        public void RequestSendTrafficUserMessageAsync(bool Scrambled, int TCID, long UserMsg) {
            this.RequestSendTrafficUserMessageAsync(Scrambled, TCID, UserMsg, null);
        }
        
        /// <remarks/>
        public void RequestSendTrafficUserMessageAsync(bool Scrambled, int TCID, long UserMsg, object userState) {
            if ((this.RequestSendTrafficUserMessageOperationCompleted == null)) {
                this.RequestSendTrafficUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestSendTrafficUserMessageOperationCompleted);
            }
            this.InvokeAsync("RequestSendTrafficUserMessage", new object[] {
                        Scrambled,
                        TCID,
                        UserMsg}, this.RequestSendTrafficUserMessageOperationCompleted, userState);
        }
        
        private void OnRequestSendTrafficUserMessageOperationCompleted(object arg) {
            if ((this.RequestSendTrafficUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestSendTrafficUserMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopTrafficUserMessageResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopTrafficUserMessage(bool Scrambled, int TCID, long UserMsg) {
            this.Invoke("RequestStopTrafficUserMessage", new object[] {
                        Scrambled,
                        TCID,
                        UserMsg});
        }
        
        /// <remarks/>
        public void RequestStopTrafficUserMessageAsync(bool Scrambled, int TCID, long UserMsg) {
            this.RequestStopTrafficUserMessageAsync(Scrambled, TCID, UserMsg, null);
        }
        
        /// <remarks/>
        public void RequestStopTrafficUserMessageAsync(bool Scrambled, int TCID, long UserMsg, object userState) {
            if ((this.RequestStopTrafficUserMessageOperationCompleted == null)) {
                this.RequestStopTrafficUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopTrafficUserMessageOperationCompleted);
            }
            this.InvokeAsync("RequestStopTrafficUserMessage", new object[] {
                        Scrambled,
                        TCID,
                        UserMsg}, this.RequestStopTrafficUserMessageOperationCompleted, userState);
        }
        
        private void OnRequestStopTrafficUserMessageOperationCompleted(object arg) {
            if ((this.RequestStopTrafficUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopTrafficUserMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="StopAllTrafficMessagesResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestStopAllTrafficMessages(int TCID) {
            this.Invoke("RequestStopAllTrafficMessages", new object[] {
                        TCID});
        }
        
        /// <remarks/>
        public void RequestStopAllTrafficMessagesAsync(int TCID) {
            this.RequestStopAllTrafficMessagesAsync(TCID, null);
        }
        
        /// <remarks/>
        public void RequestStopAllTrafficMessagesAsync(int TCID, object userState) {
            if ((this.RequestStopAllTrafficMessagesOperationCompleted == null)) {
                this.RequestStopAllTrafficMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStopAllTrafficMessagesOperationCompleted);
            }
            this.InvokeAsync("RequestStopAllTrafficMessages", new object[] {
                        TCID}, this.RequestStopAllTrafficMessagesOperationCompleted, userState);
        }
        
        private void OnRequestStopAllTrafficMessagesOperationCompleted(object arg) {
            if ((this.RequestStopAllTrafficMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStopAllTrafficMessagesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="SendTestFigResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestSendTestFig([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data) {
            this.Invoke("RequestSendTestFig", new object[] {
                        data});
        }
        
        /// <remarks/>
        public void RequestSendTestFigAsync(byte[] data) {
            this.RequestSendTestFigAsync(data, null);
        }
        
        /// <remarks/>
        public void RequestSendTestFigAsync(byte[] data, object userState) {
            if ((this.RequestSendTestFigOperationCompleted == null)) {
                this.RequestSendTestFigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestSendTestFigOperationCompleted);
            }
            this.InvokeAsync("RequestSendTestFig", new object[] {
                        data}, this.RequestSendTestFigOperationCompleted, userState);
        }
        
        private void OnRequestSendTestFigOperationCompleted(object arg) {
            if ((this.RequestSendTestFigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestSendTestFigCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="ServiceLinkResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Link")]
        public Link RequestServiceLink(string Name) {
            object[] results = this.Invoke("RequestServiceLink", new object[] {
                        Name});
            return ((Link)(results[0]));
        }
        
        /// <remarks/>
        public void RequestServiceLinkAsync(string Name) {
            this.RequestServiceLinkAsync(Name, null);
        }
        
        /// <remarks/>
        public void RequestServiceLinkAsync(string Name, object userState) {
            if ((this.RequestServiceLinkOperationCompleted == null)) {
                this.RequestServiceLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestServiceLinkOperationCompleted);
            }
            this.InvokeAsync("RequestServiceLink", new object[] {
                        Name}, this.RequestServiceLinkOperationCompleted, userState);
        }
        
        private void OnRequestServiceLinkOperationCompleted(object arg) {
            if ((this.RequestServiceLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestServiceLinkCompleted(this, new RequestServiceLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="AllServiceLinksResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("NameArray")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("Name")]
        public string[] RequestAllServiceLinks() {
            object[] results = this.Invoke("RequestAllServiceLinks", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAllServiceLinksAsync() {
            this.RequestAllServiceLinksAsync(null);
        }
        
        /// <remarks/>
        public void RequestAllServiceLinksAsync(object userState) {
            if ((this.RequestAllServiceLinksOperationCompleted == null)) {
                this.RequestAllServiceLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAllServiceLinksOperationCompleted);
            }
            this.InvokeAsync("RequestAllServiceLinks", new object[0], this.RequestAllServiceLinksOperationCompleted, userState);
        }
        
        private void OnRequestAllServiceLinksOperationCompleted(object arg) {
            if ((this.RequestAllServiceLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAllServiceLinksCompleted(this, new RequestAllServiceLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="NewServiceLinkResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestNewServiceLink(Link Link) {
            this.Invoke("RequestNewServiceLink", new object[] {
                        Link});
        }
        
        /// <remarks/>
        public void RequestNewServiceLinkAsync(Link Link) {
            this.RequestNewServiceLinkAsync(Link, null);
        }
        
        /// <remarks/>
        public void RequestNewServiceLinkAsync(Link Link, object userState) {
            if ((this.RequestNewServiceLinkOperationCompleted == null)) {
                this.RequestNewServiceLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestNewServiceLinkOperationCompleted);
            }
            this.InvokeAsync("RequestNewServiceLink", new object[] {
                        Link}, this.RequestNewServiceLinkOperationCompleted, userState);
        }
        
        private void OnRequestNewServiceLinkOperationCompleted(object arg) {
            if ((this.RequestNewServiceLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestNewServiceLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="RemoveServiceLinkResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestRemoveServiceLink(string Name) {
            this.Invoke("RequestRemoveServiceLink", new object[] {
                        Name});
        }
        
        /// <remarks/>
        public void RequestRemoveServiceLinkAsync(string Name) {
            this.RequestRemoveServiceLinkAsync(Name, null);
        }
        
        /// <remarks/>
        public void RequestRemoveServiceLinkAsync(string Name, object userState) {
            if ((this.RequestRemoveServiceLinkOperationCompleted == null)) {
                this.RequestRemoveServiceLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestRemoveServiceLinkOperationCompleted);
            }
            this.InvokeAsync("RequestRemoveServiceLink", new object[] {
                        Name}, this.RequestRemoveServiceLinkOperationCompleted, userState);
        }
        
        private void OnRequestRemoveServiceLinkOperationCompleted(object arg) {
            if ((this.RequestRemoveServiceLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestRemoveServiceLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DabCtrlApi", RequestNamespace="factum.se/dab", ResponseElementName="AllServiceComponentsResponse", ResponseNamespace="factum.se/dab", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ComponentArray")]
        public Component[] RequestAllServiceComponents(string configuration) {
            object[] results = this.Invoke("RequestAllServiceComponents", new object[] {
                        configuration});
            return ((Component[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAllServiceComponentsAsync(string configuration) {
            this.RequestAllServiceComponentsAsync(configuration, null);
        }
        
        /// <remarks/>
        public void RequestAllServiceComponentsAsync(string configuration, object userState) {
            if ((this.RequestAllServiceComponentsOperationCompleted == null)) {
                this.RequestAllServiceComponentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAllServiceComponentsOperationCompleted);
            }
            this.InvokeAsync("RequestAllServiceComponents", new object[] {
                        configuration}, this.RequestAllServiceComponentsOperationCompleted, userState);
        }
        
        private void OnRequestAllServiceComponentsOperationCompleted(object arg) {
            if ((this.RequestAllServiceComponentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAllServiceComponentsCompleted(this, new RequestAllServiceComponentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="factum.se/dab", IsNullable=false)]
    public partial class Authorization : System.Web.Services.Protocols.SoapHeader {
        
        private string usernameField;
        
        private string passwordField;
        
        private int accessLevelField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public int AccessLevel {
            get {
                return this.accessLevelField;
            }
            set {
                this.accessLevelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class Component {
        
        private int serviceIdField;
        
        private int componentIdField;
        
        private int tMIdField;
        
        private int subChIdField;
        
        private int subChBitrateField;
        
        private int subChSizeField;
        
        private int subChProtectionField;
        
        private int sampleRateField;
        
        /// <remarks/>
        public int ServiceId {
            get {
                return this.serviceIdField;
            }
            set {
                this.serviceIdField = value;
            }
        }
        
        /// <remarks/>
        public int ComponentId {
            get {
                return this.componentIdField;
            }
            set {
                this.componentIdField = value;
            }
        }
        
        /// <remarks/>
        public int TMId {
            get {
                return this.tMIdField;
            }
            set {
                this.tMIdField = value;
            }
        }
        
        /// <remarks/>
        public int SubChId {
            get {
                return this.subChIdField;
            }
            set {
                this.subChIdField = value;
            }
        }
        
        /// <remarks/>
        public int SubChBitrate {
            get {
                return this.subChBitrateField;
            }
            set {
                this.subChBitrateField = value;
            }
        }
        
        /// <remarks/>
        public int SubChSize {
            get {
                return this.subChSizeField;
            }
            set {
                this.subChSizeField = value;
            }
        }
        
        /// <remarks/>
        public int SubChProtection {
            get {
                return this.subChProtectionField;
            }
            set {
                this.subChProtectionField = value;
            }
        }
        
        /// <remarks/>
        public int SampleRate {
            get {
                return this.sampleRateField;
            }
            set {
                this.sampleRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class Link {
        
        private string nameField;
        
        private int setNumberField;
        
        private bool hardFlagField;
        
        private bool oeFlagField;
        
        private int idQualifierField;
        
        private int[] idArrayField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int SetNumber {
            get {
                return this.setNumberField;
            }
            set {
                this.setNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool HardFlag {
            get {
                return this.hardFlagField;
            }
            set {
                this.hardFlagField = value;
            }
        }
        
        /// <remarks/>
        public bool OeFlag {
            get {
                return this.oeFlagField;
            }
            set {
                this.oeFlagField = value;
            }
        }
        
        /// <remarks/>
        public int IdQualifier {
            get {
                return this.idQualifierField;
            }
            set {
                this.idQualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ID", IsNullable=false)]
        public int[] IdArray {
            get {
                return this.idArrayField;
            }
            set {
                this.idArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class Announcement {
        
        private string clusterField;
        
        private int typeField;
        
        private string regionField;
        
        private bool newField;
        
        private string sourceNameField;
        
        private int idField;
        
        /// <remarks/>
        public string Cluster {
            get {
                return this.clusterField;
            }
            set {
                this.clusterField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
        /// <remarks/>
        public bool New {
            get {
                return this.newField;
            }
            set {
                this.newField = value;
            }
        }
        
        /// <remarks/>
        public string SourceName {
            get {
                return this.sourceNameField;
            }
            set {
                this.sourceNameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class PNum {
        
        private int dayField;
        
        private int hourField;
        
        private int minuteField;
        
        /// <remarks/>
        public int day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
            }
        }
        
        /// <remarks/>
        public int hour {
            get {
                return this.hourField;
            }
            set {
                this.hourField = value;
            }
        }
        
        /// <remarks/>
        public int minute {
            get {
                return this.minuteField;
            }
            set {
                this.minuteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class Application {
        
        private int typeField;
        
        private byte[] dataField;
        
        /// <remarks/>
        public int type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class ProgramType {
        
        private string internationalCodeField;
        
        private string coarseCodeField;
        
        private string fineCode1Field;
        
        private string fineCode2Field;
        
        /// <remarks/>
        public string internationalCode {
            get {
                return this.internationalCodeField;
            }
            set {
                this.internationalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string coarseCode {
            get {
                return this.coarseCodeField;
            }
            set {
                this.coarseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string fineCode1 {
            get {
                return this.fineCode1Field;
            }
            set {
                this.fineCode1Field = value;
            }
        }
        
        /// <remarks/>
        public string fineCode2 {
            get {
                return this.fineCode2Field;
            }
            set {
                this.fineCode2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="factum.se/dab")]
    public partial class Entry {
        
        private System.DateTime timeField;
        
        private string configurationField;
        
        /// <remarks/>
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public string configuration {
            get {
                return this.configurationField;
            }
            set {
                this.configurationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestTimePlanCompletedEventHandler(object sender, RequestTimePlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestTimePlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestTimePlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Entry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestAllConfigurationsCompletedEventHandler(object sender, RequestAllConfigurationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAllConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAllConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestBookCompletedEventHandler(object sender, RequestBookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Entry Entry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entry)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestCancelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestAllProgramTypesCompletedEventHandler(object sender, RequestAllProgramTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAllProgramTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAllProgramTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] CoarseArray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string[] FineArray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestProgramTypeCompletedEventHandler(object sender, RequestProgramTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestProgramTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestProgramTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProgramType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProgramType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestNewProgramTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestLanguageCompletedEventHandler(object sender, RequestLanguageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestNewLanguageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestApplicationCompletedEventHandler(object sender, RequestApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Application[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Application[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestNewApplicationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestServiceLabelCompletedEventHandler(object sender, RequestServiceLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestServiceLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestServiceLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ShortLabel {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestNewServiceLabelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestComponentLabelCompletedEventHandler(object sender, RequestComponentLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestComponentLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestComponentLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ShortLabel {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestNewComponentLabelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestSendPNumCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestSendPNumUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopPNumCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopPNumUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopAllPNumsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStartAnnouncementCompletedEventHandler(object sender, RequestStartAnnouncementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestStartAnnouncementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestStartAnnouncementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopAnnouncementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestActiveAnnouncementsCompletedEventHandler(object sender, RequestActiveAnnouncementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestActiveAnnouncementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestActiveAnnouncementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Announcement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Announcement[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestAllRegionsCompletedEventHandler(object sender, RequestAllRegionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAllRegionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAllRegionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestAllClustersCompletedEventHandler(object sender, RequestAllClustersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAllClustersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAllClustersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestSendEmergencyWarningCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopEmergencyWarningCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopAllEmergencyWarningsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestSendTrafficSystemMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopTrafficSystemMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestSendTrafficUserMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopTrafficUserMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestStopAllTrafficMessagesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestSendTestFigCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestServiceLinkCompletedEventHandler(object sender, RequestServiceLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestServiceLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestServiceLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Link Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Link)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestAllServiceLinksCompletedEventHandler(object sender, RequestAllServiceLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAllServiceLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAllServiceLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestNewServiceLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestRemoveServiceLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestAllServiceComponentsCompletedEventHandler(object sender, RequestAllServiceComponentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAllServiceComponentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestAllServiceComponentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Component[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Component[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591